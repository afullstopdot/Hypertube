<!DOCTYPE html>

<html lang="en">
  <head>
    <title>.tube</title>
    <meta name="viewport" charset="UTF-8" content="width=device-width, initial scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="{{ base_url() }}/css/app.css">
    <link rel="icon"       href="{{ base_url() }}/imgs/icon.png">
    <link rel="stylesheet" href="http://fontawesome.io/assets/font-awesome/css/font-awesome.css">
    <style type="text/css">iframe.goog-te-banner-frame{ display: none !important;}</style>
    <style type="text/css">body {position: static !important; top:0px !important;}</style>
    <style>
        .card.hovercard .cardheader {
          background: url("{{ base_url() }}/uploads/header.jpg");
          background-size: cover;
          height: 135px;
        }
    </style>
  </head>

  <body>
      {% include 'render/navigation.twig' %}
      <div class="container-fluid">
        {% include 'render/flash.twig' %}
        <div class="container">
          <div id="google_translate_element"></div>
        </div>
        <div id="loader"></div>
        {% block content %}{% endblock %}
      </div>
      <br>
      <div class="page-footer text-center">copyright afullstopdot</div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script>
    <script src="http://malsup.github.com/jquery.form.js"></script>
    <script src="{{ base_url() }}/js/app.js"></script>
    <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
    <script type="text/javascript">
      function googleTranslateElementInit() {
        new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE}, 'google_translate_element');
      }
    </script>
    <script>
      document.getElementById("loader").style.display = "block";
      $(document).ready(function() {
        document.getElementById("loader").style.display = "none";
      });
    </script>
    <script>
    function pager(str) {
      document.getElementById("loader").style.display = "block";
      var xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var response = JSON.parse(xmlhttp.responseText);
          var movie = response[0];
          var watched = response[1];
          var page_num = response['page'];
          // change the title
          var h3 = document.getElementsByClassName("movie-title");
          for (var i in h3) {
            try {
              h3[i].innerHTML = movie[i]['title'];// edit html content
            } catch (e) {
              console.log(e.message);              // "null has no properties"
            }
          }
          // change img
          var img = document.getElementsByClassName("img-responsive");
          for (var a in img) {
            try {
              img[a].src = movie[a]['large_cover_image'];// edit html content
            } catch (e) {
              console.log(e.message);              // "null has no properties"
            }
          }
          //change stream id
          var atag = document.getElementsByClassName("stream-id");
          for (var b in atag) {
            try {
              //regex, gets url, replaces with new id then new movie name, if stream doesnt recognize the movie possibly cause of my regex
              atag[b].href = atag[b].href.replace(/movie=\d+/i, "movie=" + movie[b]['id']);
              atag[b].href = atag[b].href.replace(/name=.+/, "name=" + encodeURI(movie[b]['title']));
            } catch (e) {
              console.log(e.message);              // "null has no properties"
            }
          }
          //clear all spans so next check creates right spans for watched movies
          var c_span = document.getElementsByClassName("glyphicon glyphicon-repeat");
          for (var d in c_span) {
            try {
              c_span[d].className = "glyphicon glyphicon-play";
            } catch (e) {
              console.log(e.message);              // "null has no properties"
            }
          }
          // check if movie has been watched, and change the span
          var span = [].slice.apply(document.getElementsByClassName("glyphicon glyphicon-play"));
          for (var i = 0; i < span.length; i++) {
            try {
              for (var count = 0; count < watched.length; count++)
              {
                if (movie[i]['id'] == watched[count]['movie_id'])
                  span[i].className = span[i].className.replace(/glyphicon glyphicon-play/, "glyphicon glyphicon-repeat");
              }
            } catch (ex) {
              console.log('Error checking if movie, was watched previously.');
            }
          }
          // time to change the modal info
          var modal_fade = document.getElementsByClassName("modal fade");
          var modal_title = document.getElementsByClassName("movie-title-h4");
          var movie_year = document.getElementsByClassName("movie-year");
          var movie_rat = document.getElementsByClassName("movie-rating");
          var movie_run = document.getElementsByClassName("movie-runtime");
          var movie_sys = document.getElementsByClassName("movie-synopsis");
          for (var f in modal_fade)
          {
            try {
              modal_title[f].innerHTML = movie[f]['title'];
              movie_year[f].innerHTML = "Production Year: " + movie[f]['year'];
              movie_rat[f].innerHTML = "imdB rating: " + movie[f]['rating'];
              movie_run[f].innerHTML = "Runtime: " + movie[f]['runtime'] + " minutes";
              movie_sys[f].innerHTML = "Synopsis: " + movie[f]['synopsis'];
            } catch (e) {
              console.log(e.message);
            }
          }
          // adjust pager
          if (page_num > 1)
          {
            try {
              var pager = [].slice.apply(document.getElementsByClassName("prev-pager"));
              console.log(pager);
            } catch (e) {
              console.log("Error updating Pager - " + e.message);
            }
          }
          document.getElementById("loader").style.display = "none";
        }
      };
      xmlhttp.open("GET", "{{ path_for('pager' )}}?pager=" + str, true);
      xmlhttp.send();
    }
  </script>
  <script>
    document.getElementById("loader").style.display = "block";
    // send comment using ajax
    $("#comment-form").submit(function(event) {
       /* stop form from submitting normally */
       event.preventDefault();
       // pass the movie_id
       var get_parameters = window.location.href.substring(window.location.href.indexOf("movie"));
       var movie_id = get_parameters.substring(0, get_parameters.indexOf("&"));
       /* get the action attribute from the <form action=""> element */
       var $form = $(this), url = $form.attr('action');
       /* Send the data using post with element id name and name2*/
       var posting = $.get( url,
         {
           comment: $('#comment-area').val(),
           movie: movie_id.substring(movie_id.indexOf("=") + 1)
         }
       );
       /* Alerts the results */
       posting.done(function(data) {
         if (window.location.href.indexOf("stream") != -1) //check that we on the stream page
         {
           var get_parameters = window.location.href.substring(window.location.href.indexOf("movie"));
           var url = window.location.href.substring(0, window.location.href.indexOf("?")) + "/comment";
           // send ajax request
           var xmlhttp = new XMLHttpRequest();
           xmlhttp.onreadystatechange = function() {
             if (this.readyState == 4 && this.status == 200) {
               // http request success now get comments and update the page
               var response = JSON.parse(xmlhttp.responseText);
               // if this is true, add elements to dom with comments
               if (response.length > 0)
               {
                 var comment_elem;
                 var hr_elem;
                 for (var count = 0; count < response.length; count++)
                 {
                  //  console.log(response[count]['comment_id']);
                   if ($("#" + response[count]['comment_id']).length == 0) {

                     console.log("Comment: " + response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" ")));
                     // start adding comments to dom.
                     comment_elem = document.createElement("P");
                     comment_elem.setAttribute("id", response[count]['comment_id']);
                     comment_elem.style.fontStyle = "italic";
                     // comment_textnode = document.createTextNode(response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" ")));
                     comment_elem.appendChild(document.createTextNode(response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" "))));
                     document.getElementById("comment-list").appendChild(comment_elem);

                     hr_elem = document.createElement("HR");
                     document.getElementById("comment-list").appendChild(hr_elem);

                  }
                  else
                    console.log('Exists');
                 }
               }
               document.getElementById("loader").style.display = "none";
               // end of update
             }
           };
           xmlhttp.open("GET", "{{ path_for('stream.comment' )}}?request=comment&" + get_parameters, true);
           xmlhttp.send();
           // end of request
         }
       });
    });
    // update list of comments using ajax
    document.getElementById("loader").style.display = "block";
    $(document).ready(function() {
      if (window.location.href.indexOf("stream") != -1) //check that we on the stream page
      {
        var get_parameters = window.location.href.substring(window.location.href.indexOf("movie"));
        var url = window.location.href.substring(0, window.location.href.indexOf("?")) + "/comment";
        // send ajax request
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            // http request success now get comments and update the page
            var response = JSON.parse(xmlhttp.responseText);
            // if this is true, add elements to dom with comments
            if (response.length > 0)
            {
              var comment_elem;
              var hr_elem;
              for (var count = 0; count < response.length; count++)
              {
                if($("#" + response[count]['comment_id']).length == 0) {

                  console.log("Comment: " + response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" ")));
                  // start adding comments to dom.
                  comment_elem = document.createElement("P");
                  comment_elem.style.fontStyle = "italic";
                  comment_elem.setAttribute("id", response[count]['comment_id']);
                  // comment_textnode = document.createTextNode(response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" ")));
                  comment_elem.appendChild(document.createTextNode(response[count]['name'] + ": '" + response[count]['comment'] + "' at " + response[count]['created_at'].substring(0, response[count]['created_at'].indexOf(" "))));
                  document.getElementById("comment-list").appendChild(comment_elem);

                  hr_elem = document.createElement("HR");
                  document.getElementById("comment-list").appendChild(hr_elem);
                }
              }
            }
            document.getElementById("loader").style.display = "none";
            // end of update
          }
        };
        xmlhttp.open("GET", "{{ path_for('stream.comment' )}}?request=comment&" + get_parameters, true);
        xmlhttp.send();
        // end of request
      }
    });
  </script>
  </body>
</html>
